name: build_and_deploy_services

on:
  workflow_call:
    secrets:
      DOCKER_AUTH_TOKEN:
        description: "Required docker auth token"
        required: true
  push:
    branches:
      - main

env:
  NODE_ENV: "dev"
  SERVICE_NAME: "clan.sports-services"
  DOCKER_USERNAME: "codigouranio"
  AWS_DEFAULT_REGION: "us-east-1"

jobs:
  build-and-publish-docker:
    if: "!contains(github.event.head_commit.message, 'WIP')"
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: restore_or_save_cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache/pip
            ./node_modules
          key: ${{ runner.os }}-v1-dependencies-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-v1-dependencies-
      - name: Download config from S3
        run: |
          aws s3 cp s3://clan-sports-configs/config.dev.py ./
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_AUTH_TOKEN }}
      - name: Build and push services
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/Dockerfile
          push: true
          tags: codigouranio/clan-sports-app:latest
          build-args: |
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION=${{ vars.AWS_DEFAULT_REGION }}
            SEC_REPO_TOKEN=${{ secrets.SEC_REPO_TOKEN }}
            BUILDKIT_INLINE_CACHE=1
      - name: Create deploy file
        env:
          CONTAINER_IMAGE_NAME: ${{ env.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:latest
        run: |
          zip -rj deploy.zip Dockerrun.aws.json
      - uses: actions/upload-artifact@v4
        with:
          name: deploy.zip
          path: deploy.zip

  deploy-service-production:
    needs: [build-and-publish-docker]
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Prerequisites
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ env.AWS_DEFAULT_REGION }}
          aws configure set region ${{ env.AWS_DEFAULT_REGION }}
      - name: Get timestamp
        uses: gerred/actions/current-time@master
        id: current-time
      - name: Run string replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: "-"
          flags: "g"
      - uses: actions/download-artifact@v4
        with:
          name: deploy.zip
      - name: Rename deploy file to version
        run: |
          mv deploy.zip deploy-${{ steps.format-time.outputs.replaced }}.zip
      - name: Deploy to EB
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: "clan-sports"
          environment_name: "clan-sports-env"
          version_label: "clan-sports-${{ steps.format-time.outputs.replaced }}"
          region: "us-east-1"
          deployment_package: deploy-${{ steps.format-time.outputs.replaced }}.zip
          wait_for_environment_recovery: 120
          max_backoff_retries: 5
          
